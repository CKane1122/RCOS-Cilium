In the past 2 weeks ago starting at thanksgiving break, i started learning some golang to try and make my own environment to test the qualities between cilium and raw eBPF in network connectivity.
Here is how i structured the benchmark and the testing metrics:

I first downloaded all necessary tools and headers for eBPF using the command lines:
sudo apt update
sudo apt install -y linux-headers-$(uname -r) clang llvm libbpf-dev iproute2

then i already had cilium installed since i finished my onboarding specifically in kubernetes
using this website (https://cycle.io/learn/configuring-network-interfaces-on-linux) to learn how to setup the network interface using these command lines as well:
sudo ip netns add testns
sudo ip link add veth0 type veth peer name veth1
sudo ip link set veth1 netns testns
sudo ip netns exec testns ip addr add 192.168.1.2/24 dev veth1
sudo ip netns exec testns ip link set veth1 up
sudo ip addr add 192.168.1.1/24 dev veth0
sudo ip link set veth0 up

after setting this network interface up i found some code to help me with this in benchmark.go
now i needed to load into the eBPF program into the interface i just created using this command line:
ip link set dev veth0 xdp obj xdp_prog.o sec xdp_pass

i also made sure to validate that cilium was working by using "cilium monitor" and test the raw eBPF programs by generating traffic and seeing how they respond:
sudo tc qdisc add dev veth0 clsact
sudo tc filter add dev veth0 egress bpf da obj egress_prog.o sec egress

from all this setup i observed the traffic handling from cilium by using "cilium connectivity test" and bpftrace to observe the eBPF performance
the traffic was generated by iperf3 and i measured the results by throughput, latency, and CPU usage

I used the R language to create some simple graphs to show the raw data better and that can be found in graphs.R
these raw results will be shown in results.txt and the graphs (if i can't put directly put it on github, then i'll send the link to a word doc)
